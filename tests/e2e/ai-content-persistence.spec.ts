import { test, expect } from '@playwright/test';

const AI_CONTENT = {
  aiGeneratedContent: '{"message": "This is AI generated content."}',
  promotionalHeadline: 'AI-Powered Session of the Future',
  promotionalSummary: 'A summary generated by AI to attract attendees.',
  keyBenefits: '["Learn faster", "Gain new skills"]',
  callToAction: 'Register now for our AI session!',
  socialMediaContent: 'Check out our new AI-powered session! #AI #Training',
  emailMarketingContent: 'Dear user, you are invited to our exclusive AI session.',
};

test.describe('AI Content Persistence', () => {
  let authToken: string;
  let sessionId: string;

  test.beforeAll(async ({ request }) => {
    // 1. Authenticate and get token
    const loginResponse = await request.post('/api/auth/login', {
      data: {
        email: 'content.developer@test.com',
        password: 'password123',
      },
    });
    expect(loginResponse.ok()).toBeTruthy();
    const loginBody = await loginResponse.json();
    authToken = loginBody.access_token;
    expect(authToken).toBeDefined();

    // 2. Create a session to work with
    const createSessionResponse = await request.post('/api/sessions', {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
      data: {
        title: 'Test Session for AI Persistence',
        description: 'Initial description',
        startTime: new Date().toISOString(),
        endTime: new Date(Date.now() + 3600 * 1000).toISOString(),
        maxRegistrations: 10,
      },
    });
    expect(createSessionResponse.ok()).toBeTruthy();
    const session = await createSessionResponse.json();
    sessionId = session.id;
    expect(sessionId).toBeDefined();

    // 3. Update the session with AI content via API
    const updateResponse = await request.patch(`/api/sessions/${sessionId}`,
    {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
      data: AI_CONTENT,
    });
    expect(updateResponse.ok()).toBeTruthy();
  });

  test.afterAll(async ({ request }) => {
    if (sessionId) {
      await request.delete(`/api/sessions/${sessionId}`, {
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
      });
    }
  });

  test('should persist AI content after auto-save', async ({ page }) => {
    // Log in to the UI
    await page.goto('/');
    await page.fill('input[type="email"]', 'content.developer@test.com');
    await page.fill('input[type="password"]', 'password123');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL(/.*\/dashboard/);

    // Navigate to the session edit page
    await page.goto(`/sessions/${sessionId}/edit`);

    // Intercept the auto-save request
    let autoSaveRequestPromise = page.waitForRequest(
      (request) =>
        request.url().includes(`/api/sessions/${sessionId}/autosave`) &&
        request.method() === 'POST'
    );

    // Trigger auto-save by editing the title
    const titleInput = page.locator('#title');
    await titleInput.fill('Test Session for AI Persistence - Updated');

    const request = await autoSaveRequestPromise;
    const postData = request.postDataJSON();

    // Verify that the auto-save request contains the AI content
    expect(postData.title).toBe('Test Session for AI Persistence - Updated');
    expect(postData.promotionalHeadline).toBe(AI_CONTENT.promotionalHeadline);
    expect(postData.promotionalSummary).toBe(AI_CONTENT.promotionalSummary);

    // Reload the page and verify again
    await page.reload();

    autoSaveRequestPromise = page.waitForRequest(
      (request) =>
        request.url().includes(`/api/sessions/${sessionId}/autosave`) &&
        request.method() === 'POST'
    );

    // Trigger auto-save again
    await titleInput.fill('Test Session for AI Persistence - Updated Again');

    const secondRequest = await autoSaveRequestPromise;
    const secondPostData = secondRequest.postDataJSON();

    // Verify that the AI content is still there after reload
    expect(secondPostData.title).toBe('Test Session for AI Persistence - Updated Again');
    expect(secondPostData.promotionalHeadline).toBe(AI_CONTENT.promotionalHeadline);
  });

  test('should allow clearing an AI content field', async ({ page, request }) => {
    // Clear a field via API
    const updateResponse = await request.patch(`/api/sessions/${sessionId}`,
    {
      headers: {
        Authorization: `Bearer ${authToken}`,
      },
      data: {
        promotionalHeadline: null,
      },
    });
    expect(updateResponse.ok()).toBeTruthy();

    // Log in to the UI
    await page.goto('/');
    await page.fill('input[type="email"]', 'content.developer@test.com');
    await page.fill('input[type="password"]', 'password123');
    await page.click('button[type="submit"]');
    await expect(page).toHaveURL(/.*\/dashboard/);

    // Navigate to the session edit page
    await page.goto(`/sessions/${sessionId}/edit`);

    const autoSaveRequestPromise = page.waitForRequest(
      (request) =>
        request.url().includes(`/api/sessions/${sessionId}/autosave`) &&
        request.method() === 'POST'
    );

    // Trigger auto-save
    await page.locator('#title').fill('Test Session - Clearing Field');

    const req = await autoSaveRequestPromise;
    const postData = req.postDataJSON();

    // Verify the field is cleared and others remain
    expect(postData.promotionalHeadline).toBe(null);
    expect(postData.promotionalSummary).toBe(AI_CONTENT.promotionalSummary);
  });
});
