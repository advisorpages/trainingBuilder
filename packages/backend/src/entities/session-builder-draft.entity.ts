import { Column, Entity, JoinColumn, ManyToOne } from 'typeorm';
import { BaseEntity } from './base.entity';
import { Session } from './session.entity';

/**
 * Persists the latest draft payload generated by the session builder autosave flow.
 * Each record is keyed by `draftKey`, which maps to the frontend session identifier.
 * When a backing session entity exists, we retain the relation for cascading clean-up.
 */
@Entity({ name: 'session_builder_drafts' })
export class SessionBuilderDraft extends BaseEntity {
  @Column({ unique: true })
  draftKey: string;

  @ManyToOne(() => Session, { nullable: true, onDelete: 'CASCADE' })
  @JoinColumn({ name: 'session_id' })
  session?: Session | null;

  @Column({ type: 'jsonb' })
  payload: Record<string, unknown>;

  @Column({ type: 'timestamptz' })
  savedAt: Date;
}

