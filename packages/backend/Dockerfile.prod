# Multi-stage build for production
FROM node:18-alpine AS builder

WORKDIR /app

# Copy package files
COPY package*.json ./
COPY ./packages/shared ./packages/shared
COPY ./packages/backend/package*.json ./packages/backend/

# Install dependencies
RUN npm ci --only=production

# Build shared package
RUN cd packages/shared && npm run build

# Copy backend source
COPY ./packages/backend ./packages/backend

# Build backend
WORKDIR /app/packages/backend
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Install dumb-init for proper process handling
RUN apk add --no-cache dumb-init

# Create non-root user
RUN addgroup -g 1001 -S nodejs
RUN adduser -S backend -u 1001

WORKDIR /app

# Copy built application
COPY --from=builder --chown=backend:nodejs /app/packages/backend/dist ./dist
COPY --from=builder --chown=backend:nodejs /app/packages/backend/package*.json ./
COPY --from=builder --chown=backend:nodejs /app/packages/shared/dist ./shared
COPY --from=builder --chown=backend:nodejs /app/node_modules ./node_modules

# Switch to non-root user
USER backend

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node healthcheck.js

EXPOSE 3001

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]
CMD ["node", "dist/backend/src/main.js"]